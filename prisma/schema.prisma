// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String           @id @default(cuid())
  name          String?
  email         String?          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole         @default(USER)
  permissions   UserPermission[]

  //New
  documents    Document[]
  departmentId String
  department   Departments @relation(fields: [departmentId], references: [id])
}

model Permission {
  id    String           @id @default(cuid())
  name  String           @unique
  users UserPermission[]
}

model UserPermission {
  id           String     @id @default(cuid())
  userId       String
  permissionId String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([userId, permissionId]) // Đảm bảo một người dùng không thể có quyền trùng lặp
}

model Departments {
  id        String     @id @default(uuid())
  name      String
  users     User[]
  documents Document[]
}

model Fields {
  id        String     @id @default(uuid())
  name      String
  documents Document[]
}

model DocumentTypes {
  id        String     @id @default(uuid())
  name      String
  documents Document[]
}

model Document {
  id             String         @id @default(uuid())
  title          String
  documentNumber String // So van ban
  issueDate      DateTime // Ngay ban hanh
  issuingLevel   String // Cap ban hanh
  summary        String // Trich yeu - description
  status         DocumentStatus @default(PRIVATE)
  user           User           @relation(fields: [userId], references: [id])
  userId         String

  department     Departments    @relation(fields: [departmentId], references: [id])
  departmentId   String
  field          Fields         @relation(fields: [fieldId], references: [id])
  fieldId        String
  documentType   DocumentTypes  @relation(fields: [documentTypeId], references: [id])
  documentTypeId String
  files          DocumentFile[]
}

model DocumentFile {
  id         String   @id @default(uuid())
  document   Document @relation(fields: [documentId], references: [id])
  documentId String
  fileType   FileType
  filePath   String
}

enum DocumentStatus {
  PRIVATE
  PUBLIC
}

enum FileType {
  MAIN
  ORIGINAL
}



